name: Weapon Detection CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y protobuf-compiler libgl1 libsm6 libxext6 libxrender-dev jq unzip

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest opencv-python-headless flask pillow requests selenium

      - name: Clone TensorFlow models and set up object_detection
        run: |
          git clone --depth 1 https://github.com/tensorflow/models.git
          cd models/research
          protoc object_detection/protos/*.proto --python_out=.
          cp -r object_detection/ ../../  # Copy to root instead of symlink

      - name: Verify model files
        run: |
          if [ ! -f "model/frozen_inference_graph.pb" ]; then
            echo "Missing model file: frozen_inference_graph.pb"
            exit 1
          fi
          if [ ! -f "model/label_map.pbtxt" ]; then
            echo "Missing label map: label_map.pbtxt"
            exit 1
          fi

  unit-test:
    runs-on: ubuntu-latest
    needs: setup
    env:
      PYTHONPATH: ${{ github.workspace }}/models/research:${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest opencv-python-headless

      - name: Run unit tests
        run: pytest -v tests/test_weapon_detector.py

  api-test:
    runs-on: ubuntu-latest
    needs: setup
    env:
      PYTHONPATH: ${{ github.workspace }}/models/research:${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install opencv-python-headless flask pillow requests

      - name: Start Flask server with health check
        run: |
          mkdir -p uploads
          nohup python app/app.py > flask.log 2>&1 &

          # Robust health check with retries
          echo "Waiting for Flask to start..."
          for i in {1..10}; do
            if curl -s http://localhost:5000 >/dev/null; then
              echo "Flask is ready"
              exit 0
            fi
            sleep 3
          done
          echo "Flask failed to start"
          cat flask.log
          exit 1

      - name: Run API tests
        run: |
          # Install jq for JSON parsing
          sudo apt install -y jq

          # Test valid image
          RESPONSE=$(curl -s -F "file=@tests/test_image.jpg" http://localhost:5000/api/detect)
          echo "$RESPONSE" | jq .

          # Validate response
          echo "$RESPONSE" | jq -e '.detections.count >= 0'
          echo "$RESPONSE" | jq -e '.detections.scores | length >= 0'

          # Validate image
          IMG_LENGTH=$(echo "$RESPONSE" | jq -r '.annotated_image | length')
          if [ "$IMG_LENGTH" -lt 1000 ]; then
            echo "Annotated image too small: $IMG_LENGTH bytes"
            exit 1
          fi

          # Test invalid file
          RESPONSE=$(curl -s -F "file=@README.md" http://localhost:5000/api/detect)
          echo "$RESPONSE" | jq .
          echo "$RESPONSE" | jq -e '.error != null'

  browser-test:
    runs-on: ubuntu-latest
    needs: api-test  # Run after API tests
    env:
      PYTHONPATH: ${{ github.workspace }}/models/research:${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install opencv-python-headless flask pillow selenium

      - name: Install Chrome and matching Chromedriver
        run: |
          # Install latest Chrome
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt update
          sudo apt install -y google-chrome-stable

          # Get Chrome version
          CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+\.\d+')
          echo "Chrome version: $CHROME_VERSION"

          # Get major version (first number)
          MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d. -f1)
          echo "Downloading Chromedriver for Chrome v$MAJOR_VERSION"

          # Get matching Chromedriver
          CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$MAJOR_VERSION")
          wget -N https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip
          unzip -o chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver

      - name: Start Flask server
        run: |
          mkdir -p uploads
          nohup python app/app.py > flask.log 2>&1 &
          sleep 5  # Allow server to start

      - name: Run Browser Test
        run: |
          python - <<EOF
          from selenium import webdriver
          from selenium.webdriver.chrome.options import Options
          import time

          options = Options()
          options.add_argument("--headless")
          options.add_argument("--no-sandbox")
          options.add_argument("--disable-dev-shm-usage")

          driver = webdriver.Chrome(options=options)
          try:
              driver.get("http://localhost:5000")
              time.sleep(2)  # Wait for page load

              # Check for either text in title or page content
              page_source = driver.page_source
              if "Weapon" not in driver.title and "Upload" not in page_source:
                  raise Exception("Expected content not found in page")
          finally:
              driver.quit()
          EOF

  cleanup:
    if: always()
    runs-on: ubuntu-latest
    needs: [unit-test, api-test, browser-test]
    steps:
      - name: Kill Flask server
        run: pkill -f app.py || true
