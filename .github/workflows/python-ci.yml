name: Weapon Detection CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      pythonpath: ${{ steps.setpath.outputs.path }}
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            protobuf-compiler \
            libgl1 \
            libsm6 \
            libxext6 \
            libxrender-dev \
            xvfb \
            jq \
            unzip

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install opencv-python-headless pillow matplotlib pytest requests ruff selenium

      - name: Install TF Object Detection API
        run: |
          git clone --depth 1 https://github.com/tensorflow/models.git
          cd models/research/
          protoc object_detection/protos/*.proto --python_out=.
          cp -r object_detection/ ../../

      - name: Set PYTHONPATH
        id: setpath
        run: echo "path=$GITHUB_WORKSPACE/models/research:$GITHUB_WORKSPACE" >> "$GITHUB_OUTPUT"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ./models
            ./object_detection
          key: ${{ runner.os }}-deps-${{ hashFiles('requirements.txt') }}

  lint:
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Dummy lint step
        run: echo "Lint step completed successfully"

  unit-test:
    needs: lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            protobuf-compiler \
            libgl1 \
            libsm6 \
            libxext6 \
            libxrender-dev

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install opencv-python-headless pytest

      - name: Install TF Object Detection API
        run: |
          git clone --depth 1 https://github.com/tensorflow/models.git
          cd models/research/
          protoc object_detection/protos/*.proto --python_out=.
          cp -r object_detection/ ../../

      - name: Verify model files
        run: |
          if [ ! -f "model/frozen_inference_graph.pb" ]; then
            echo "Missing model file: frozen_inference_graph.pb"
            exit 1
          fi
          if [ ! -f "model/label_map.pbtxt" ]; then
            echo "Missing label map: label_map.pbtxt"
            exit 1
          fi

      - name: Run unit tests
        env:
          PYTHONPATH: ${{ needs.setup.outputs.pythonpath }}
        run: |
          pytest -v tests/test_weapon_detector.py

  api-test:
    needs: unit-test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            protobuf-compiler \
            libgl1 \
            libsm6 \
            libxext6 \
            libxrender-dev \
            jq

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install opencv-python-headless pillow matplotlib pytest requests

      - name: Install TF Object Detection API
        run: |
          git clone --depth 1 https://github.com/tensorflow/models.git
          cd models/research/
          protoc object_detection/protos/*.proto --python_out=.
          cp -r object_detection/ ../../

      - name: Start Flask server
        env:
          PYTHONPATH: ${{ needs.setup.outputs.pythonpath }}
        run: |
          mkdir -p uploads
          nohup python app/app.py > flask.log 2>&1 &
          echo "Waiting for server to start..."
          sleep 10
          curl --retry 10 --retry-delay 3 http://localhost:5000

      - name: Run API tests
        run: |
          # Test valid image upload
          RESPONSE=$(curl -s -F "file=@tests/test_image.jpg" http://localhost:5000/api/detect)
          echo "$RESPONSE" | jq .

          # Validate response structure
          [ $(echo "$RESPONSE" | jq '.detections.count') -ge 0 ] || exit 1
          [ $(echo "$RESPONSE" | jq '.detections.scores | length') -ge 0 ] || exit 1

          # Check annotated image length with proper quoting
          IMG_LENGTH=$(echo "$RESPONSE" | jq -r '.annotated_image | length')
          [ "$IMG_LENGTH" -gt 1000 ] || exit 1

          # Test invalid file type
          RESPONSE=$(curl -s -F "file=@README.md" http://localhost:5000/api/detect)
          [ "$(echo "$RESPONSE" | jq '.error')" != "null" ] || exit 1

  browser-test:
    needs: api-test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            protobuf-compiler \
            libgl1 \
            libsm6 \
            libxext6 \
            libxrender-dev \
            xvfb \
            unzip

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install opencv-python-headless pillow matplotlib pytest requests ruff selenium

      - name: Install TF Object Detection API
        run: |
          git clone --depth 1 https://github.com/tensorflow/models.git
          cd models/research/
          protoc object_detection/protos/*.proto --python_out=.
          cp -r object_detection/ ../../

      - name: Install Chrome and ChromeDriver
        run: |
          # Install Chrome
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

          # Get Chrome version
          CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+\.\d+')
          echo "Chrome version: $CHROME_VERSION"

          # Download and install ChromeDriver using the correct API
          wget -O /tmp/chromedriver.zip "https://storage.googleapis.com/chrome-for-testing-public/$CHROME_VERSION/linux64/chromedriver-linux64.zip"
          sudo unzip -j /tmp/chromedriver.zip "chromedriver-linux64/chromedriver" -d /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          chromedriver --version

      - name: Start Flask server
        env:
          PYTHONPATH: ${{ needs.setup.outputs.pythonpath }}
        run: |
          mkdir -p uploads
          nohup python app/app.py > flask.log 2>&1 &
          echo "Waiting for server to start..."
          sleep 10
          curl --retry 10 --retry-delay 3 http://localhost:5000

      - name: Run browser tests
        run: |
          xvfb-run -a python - <<END
          import requests
          import base64
          import os
          from PIL import Image
          from io import BytesIO

          # Test /api/detect endpoint
          with open('tests/test_image.jpg', 'rb') as f:
              files = {'file': ('test.jpg', f, 'image/jpeg')}
              response = requests.post('http://localhost:5000/api/detect', files=files)
              data = response.json()

          assert 'detections' in data
          assert 'annotated_image' in data

          # Decode base64 image
          img_bytes = base64.b64decode(data['annotated_image'])
          img = Image.open(BytesIO(img_bytes))
          assert img.size[0] > 0 and img.size[1] > 0
          print("Browser tests passed!")
          END

      - name: Cleanup
        if: always()
        run: |
          pkill -f "python app/app.py" || true
          rm -rf uploads flask.log

  cleanup:
    if: always()
    runs-on: ubuntu-latest
    needs: [browser-test]
    steps:
      - name: Final cleanup
        run: echo "All jobs completed"
