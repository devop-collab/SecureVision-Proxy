name: Weapon Detection CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      pythonpath: ${{ steps.setpath.outputs.path }}
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y protobuf-compiler libgl1 libsm6 libxext6 libxrender-dev jq unzip

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest opencv-python-headless flask pillow requests ruff selenium

      - name: Clone TensorFlow models
        run: |
          git clone --depth 1 https://github.com/tensorflow/models.git
          cd models/research
          protoc object_detection/protos/*.proto --python_out=.

      - name: Create symbolic link if not exists
        run: |
          TARGET="object_detection"
          LINK="./object_detection"
          if [ ! -e "$LINK" ]; then
            ln -s ~/models/research/object_detection "$LINK"
          else
            echo "Symlink already exists: $LINK"
          fi

      - name: Set PYTHONPATH
        id: setpath
        run: echo "path=$GITHUB_WORKSPACE/models/research:$GITHUB_WORKSPACE" >> "$GITHUB_OUTPUT"

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.setup.outputs.python-version }}

      - name: Install ruff (no flake8)
        run: pip install ruff

      - name: Run ruff linter
        run: ruff check .

  unit-test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.setup.outputs.python-version }}

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y python3-opencv
          pip install -r requirements.txt
          pip install pytest

      - name: Run Pytest
        run: pytest -v tests/test_weapon_detector.py

  api-test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.setup.outputs.python-version }}

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y python3-opencv
          pip install -r requirements.txt

      - name: Start Flask in background
        run: |
          mkdir -p uploads
          python app/app.py &
          sleep 30

      - name: Run API test
        run: python tests/test_api.py

  browser-test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.setup.outputs.python-version }}

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y unzip chromium-browser chromium-chromedriver python3-opencv
          pip install -r requirements.txt
          pip install selenium

      - name: Fix ChromeDriver mismatch
        run: |
          CHROME_VERSION=$(google-chrome --version | grep -oP '\d+' | head -1)
          curl -s "https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json" |
          jq -r '.versions[] | select(.version | startswith("'$CHROME_VERSION'")) | .downloads.chromedriver[] | select(.platform=="linux64") | .url' |
          head -1 |
          xargs curl -o chromedriver.zip -L
          unzip -o chromedriver.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
          sudo chmod +x /usr/local/bin/chromedriver

      - name: Run Browser Test
        run: |
          mkdir -p uploads
          python app/app.py &
          sleep 30
          python tests/test_browser.py

  cleanup:
    if: always()
    runs-on: ubuntu-latest
    needs: [unit-test, api-test, browser-test]
    steps:
      - name: Kill Flask server (if running)
        run: pkill -f app.py || true
