name: Weapon Detection CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      pythonpath: ${{ steps.setpath.outputs.path }}
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y protobuf-compiler libgl1 libsm6 libxext6 libxrender-dev jq unzip

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest opencv-python-headless flask pillow requests ruff selenium

      - name: Clone TensorFlow models
        run: |
          git clone --depth 1 https://github.com/tensorflow/models.git
          cd models/research
          protoc object_detection/protos/*.proto --python_out=.

      - name: Symlink object_detection
        run: |
          ln -s "$GITHUB_WORKSPACE/models/research/object_detection" "$GITHUB_WORKSPACE/object_detection" || echo "Symlink already exists"

      - name: Set PYTHONPATH
        id: setpath
        run: echo "path=$GITHUB_WORKSPACE/models/research:$GITHUB_WORKSPACE" >> "$GITHUB_OUTPUT"

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Install ruff
        run: pip install ruff
      - name: Run linter (ruff instead of flake8)
        run: ruff . --exit-zero  # exit-zero allows warning-only behavior

  unit-tests:
    runs-on: ubuntu-latest
    needs: setup
    env:
      PYTHONPATH: ${{ needs.setup.outputs.pythonpath }}
    steps:
      - uses: actions/checkout@v4
      - name: Install pytest
        run: pip install pytest
      - name: Run unit tests
        run: pytest -v tests/test_weapon_detector.py

  api-tests:
    runs-on: ubuntu-latest
    needs: setup
    env:
      PYTHONPATH: ${{ needs.setup.outputs.pythonpath }}
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: pip install flask requests pillow

      - name: Start Flask App
        run: |
          mkdir -p uploads
          nohup python app/app.py > flask.log 2>&1 &
          echo "Waiting for Flask..."
          for i in {1..10}; do
            if curl -s http://localhost:5000 > /dev/null; then
              echo "Flask is ready."
              break
            fi
            sleep 2
          done
          if ! curl -s http://localhost:5000 > /dev/null; then
            echo "Flask failed to start:"
            cat flask.log
            exit 1
          fi

      - name: Test API - image upload
        run: |
          RESPONSE=$(curl -s -F "file=@tests/test_image.jpg" http://localhost:5000/api/detect)
          echo "$RESPONSE" | jq .
          echo "$RESPONSE" | jq -e '.detections.count' > /dev/null

      - name: Test API - invalid file
        run: |
          RESPONSE=$(curl -s -F "file=@README.md" http://localhost:5000/api/detect)
          echo "$RESPONSE" | jq .
          echo "$RESPONSE" | jq -e '.error' > /dev/null

  browser-tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Install Chrome + Chromedriver
        run: |
          sudo apt update
          sudo apt install -y chromium-browser
          wget https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_linux64.zip
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver

      - name: Install Selenium
        run: pip install selenium

      - name: Run Selenium browser test
        run: |
          python <<EOF
          from selenium import webdriver
          from selenium.webdriver.chrome.options import Options

          options = Options()
          options.add_argument("--headless")
          options.add_argument("--no-sandbox")
          options.add_argument("--disable-dev-shm-usage")

          driver = webdriver.Chrome(options=options)
          driver.get("http://localhost:5000")
          assert "Weapon" in driver.page_source or "Upload" in driver.page_source
          driver.quit()
          EOF

  cleanup:
    if: always()
    runs-on: ubuntu-latest
    needs: [unit-tests, api-tests, browser-tests]
    steps:
      - name: Kill Flask server (if running)
        run: pkill -f app.py || true
