name: Weapon Detection CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      pythonpath: ${{ steps.setpath.outputs.path }}
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y protobuf-compiler libgl1 libsm6 libxext6 libxrender-dev jq unzip

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest opencv-python-headless flask pillow requests ruff selenium

      - name: Clone TensorFlow models
        run: |
          git clone --depth 1 https://github.com/tensorflow/models.git
          cd models/research
          protoc object_detection/protos/*.proto --python_out=.

      - name: Create symbolic link
        run: |
          # Use absolute path for reliable symlink
          ln -s "$GITHUB_WORKSPACE/models/research/object_detection" "$GITHUB_WORKSPACE/object_detection" || echo "Symlink exists"

      - name: Set PYTHONPATH
        id: setpath
        run: echo "path=$GITHUB_WORKSPACE/models/research:$GITHUB_WORKSPACE" >> "$GITHUB_OUTPUT"

  lint:
    needs: setup
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ needs.setup.outputs.pythonpath }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install ruff

      - name: Run ruff linter
        run: ruff check .

  unit-test:
    needs: setup
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ needs.setup.outputs.pythonpath }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y python3-opencv
          pip install -r requirements.txt
          pip install pytest opencv-python-headless

      - name: Run Pytest
        run: pytest -v tests/test_weapon_detector.py

  api-test:
    needs: setup
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ needs.setup.outputs.pythonpath }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y python3-opencv
          pip install -r requirements.txt
          pip install opencv-python-headless flask pillow requests

      - name: Start Flask with health check
        run: |
          mkdir -p uploads
          nohup python app/app.py > flask.log 2>&1 &

          # Improved health check with timeout
          echo "Waiting for Flask to start..."
          for i in {1..10}; do
            if curl -s http://localhost:5000 >/dev/null; then
              echo "Flask is running"
              exit 0
            fi
            sleep 3
          done
          echo "Flask failed to start"
          cat flask.log
          exit 1

      - name: Run API tests
        run: |
          # Test valid image
          RESPONSE=$(curl -s -F "file=@tests/test_image.jpg" http://localhost:5000/api/detect)
          echo "$RESPONSE" | jq .

          # Validate response structure
          echo "$RESPONSE" | jq -e '.detections.count >= 0' >/dev/null
          echo "$RESPONSE" | jq -e '.detections.scores | length >= 0' >/dev/null

          # Test invalid file
          RESPONSE=$(curl -s -F "file=@README.md" http://localhost:5000/api/detect)
          echo "$RESPONSE" | jq .
          echo "$RESPONSE" | jq -e '.error != null' >/dev/null

  browser-test:
    needs: setup
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ needs.setup.outputs.pythonpath }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y python3-opencv
          pip install -r requirements.txt
          pip install opencv-python-headless flask pillow selenium

      - name: Install matching Chrome and Chromedriver
        run: |
          # Install latest stable Chrome
          sudo apt install -y wget
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt update
          sudo apt install -y google-chrome-stable

          # Get matching Chromedriver version
          CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+\.\d+')
          CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION%.*}")
          wget -N https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip
          unzip -o chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver

      - name: Start Flask server
        run: |
          mkdir -p uploads
          nohup python app/app.py > flask.log 2>&1 &
          sleep 5  # Allow server to start

      - name: Run Browser Test
        run: |
          python - <<EOF
          from selenium import webdriver
          from selenium.webdriver.chrome.options import Options
          import time

          options = Options()
          options.add_argument("--headless")
          options.add_argument("--no-sandbox")
          options.add_argument("--disable-dev-shm-usage")

          driver = webdriver.Chrome(options=options)
          try:
              driver.get("http://localhost:5000")
              time.sleep(2)  # Allow page to load
              assert "Weapon" in driver.title or "Upload" in driver.page_source
          finally:
              driver.quit()
          EOF

  cleanup:
    if: always()
    runs-on: ubuntu-latest
    needs: [unit-test, api-test, browser-test]
    steps:
      - name: Kill Flask server
        run: pkill -f app.py || true
