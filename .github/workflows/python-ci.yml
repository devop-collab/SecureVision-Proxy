name: Weapon Detection CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    outputs:
      pythonpath: ${{ steps.export-path.outputs.path }}
    steps:
      - uses: actions/checkout@v4

      - name: Install system packages
        run: |
          sudo apt update
          sudo apt install -y \
            protobuf-compiler \
            libgl1 \
            libsm6 \
            libxext6 \
            libxrender-dev \
            xvfb \
            jq

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install opencv-python-headless pillow matplotlib pytest requests

      - name: Clone TensorFlow models
        run: |
          git clone --depth 1 https://github.com/tensorflow/models.git
          cd models/research
          protoc object_detection/protos/*.proto --python_out=.

      - name: Symlink object_detection
        run: |
          ln -s "$GITHUB_WORKSPACE/models/research/object_detection" "$GITHUB_WORKSPACE/object_detection" || echo "Link exists"

      - name: Export PYTHONPATH
        id: export-path
        run: echo "path=$GITHUB_WORKSPACE/models/research:$GITHUB_WORKSPACE" >> "$GITHUB_OUTPUT"

  lint:
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 4
    steps:
      - uses: actions/checkout@v4
      - name: Lint Code
        run: |
          pip install flake8
          flake8 app/ tests/

  unit-tests:
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 8
    env:
      PYTHONPATH: ${{ needs.setup.outputs.pythonpath }}
    steps:
      - uses: actions/checkout@v4
      - name: Run Unit Tests
        run: |
          pytest -v tests/test_weapon_detector.py

  api-tests:
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 8
    env:
      PYTHONPATH: ${{ needs.setup.outputs.pythonpath }}
    steps:
      - uses: actions/checkout@v4

      - name: Start Flask App
        run: |
          mkdir -p uploads
          nohup python app/app.py > flask.log 2>&1 &
          echo "Waiting for server..."
          sleep 6

      - name: Test API Valid Image
        run: |
          RESPONSE=$(curl -s -F "file=@tests/test_image.jpg" http://localhost:5000/api/detect)
          echo "$RESPONSE" | jq .

          echo "$RESPONSE" | jq -e '.detections.count' > /dev/null
          echo "$RESPONSE" | jq -e '.detections.classes[0]' > /dev/null
          echo "$RESPONSE" | jq -e '.detections.scores[0]' > /dev/null
          echo "$RESPONSE" | jq -e '.annotated_image' > /dev/null

          LEN=$(echo "$RESPONSE" | jq -r '.annotated_image' | wc -c)
          if [ "$LEN" -lt 1000 ]; then
            echo "Annotated image too short"; exit 1
          fi

      - name: Test API Invalid File
        run: |
          RESPONSE=$(curl -s -F "file=@README.md" http://localhost:5000/api/detect)
          echo "$RESPONSE" | jq .

          ERROR_MSG=$(echo "$RESPONSE" | jq -r '.error')
          if [ "$ERROR_MSG" == "null" ]; then
            echo "Invalid file test failed"; exit 1
          fi

  browser-tests:
    runs-on: ubuntu-latest
    needs: api-tests
    timeout-minutes: 8
    env:
      PYTHONPATH: ${{ needs.setup.outputs.pythonpath }}
    steps:
      - uses: actions/checkout@v4
      - name: Run Browser Detection Logic
        run: |
          xvfb-run -a python - <<EOF
          import requests
          import base64
          from PIL import Image
          from io import BytesIO

          with open("tests/test_image.jpg", "rb") as f:
              files = {"file": ("test.jpg", f, "image/jpeg")}
              res = requests.post("http://localhost:5000/api/detect", files=files)
              data = res.json()

          assert "detections" in data
          assert "annotated_image" in data

          img_data = base64.b64decode(data["annotated_image"])
          img = Image.open(BytesIO(img_data))
          assert img.size[0] > 0 and img.size[1] > 0
          EOF

  cleanup:
    runs-on: ubuntu-latest
    needs: [api-tests, browser-tests]
    if: always()
    timeout-minutes: 2
    steps:
      - name: Clean Flask
        run: |
          pkill -f "app.py" || true
          rm -rf uploads flask.log
